/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/ActionRuntime", "sap/fe/macros/chart/ChartUtils", "sap/fe/macros/DelegateUtil"], function (ActionRuntime, ChartUtils, DelegateUtil) {
  "use strict";

  /**
   * Static class used by MDC Chart during runtime
   *
   * @private
   * @experimental This module is only for internal/experimental use!
   */
  var ChartRuntime = {
    /**
     * Updates the chart after selection or deselection of data points.
     *
     * @function
     * @static
     * @name sap.fe.macros.chart.ChartRuntime.fnUpdateChart
     * @memberof sap.fe.macros.chart.ChartRuntime
     * @param oEvent Event triggered after selection or deselection of data points on chart
     * @ui5-restricted
     */
    fnUpdateChart: function (oEvent) {
      var oMdcChart = oEvent.getSource().getContent(),
          oInnerChart = oMdcChart.getControlDelegate()._getChart(oMdcChart);

      var sActionsMultiselectDisabled,
          oActionOperationAvailableMap = {},
          aActionsMultiselectDisabled = []; // changing drill stack changes order of custom data, looping through all

      oMdcChart.getCustomData().forEach(function (oCustomData) {
        if (oCustomData.getKey() === "operationAvailableMap") {
          oActionOperationAvailableMap = JSON.parse(DelegateUtil.getCustomData(oMdcChart, "operationAvailableMap") && DelegateUtil.getCustomData(oMdcChart, "operationAvailableMap").customData);
        } else if (oCustomData.getKey() === "multiSelectDisabledActions") {
          sActionsMultiselectDisabled = oCustomData.getValue();
          aActionsMultiselectDisabled = sActionsMultiselectDisabled ? sActionsMultiselectDisabled.split(",") : [];
        }
      });
      var oInternalModelContext = oMdcChart.getBindingContext("internal");
      var aSelectedContexts = [];
      var oModelObject;
      var aSelectedDataPoints = ChartUtils.getChartSelectedData(oInnerChart);

      for (var i = 0; i < aSelectedDataPoints.length; i++) {
        aSelectedContexts.push(aSelectedDataPoints[i].context);
      }

      oInternalModelContext.setProperty("selectedContexts", aSelectedContexts);
      oInternalModelContext.getModel().setProperty("".concat(oInternalModelContext.getPath(), "/numberOfSelectedContexts"), oInnerChart.getSelectedDataPoints().count);

      for (var j = 0; j < aSelectedContexts.length; j++) {
        var oSelectedContext = aSelectedContexts[j];
        var oContextData = oSelectedContext.getObject();

        for (var key in oContextData) {
          if (key.indexOf("#") === 0) {
            var sActionPath = key;
            sActionPath = sActionPath.substring(1, sActionPath.length);
            oModelObject = oInternalModelContext.getObject();
            oModelObject[sActionPath] = true;
            oInternalModelContext.setProperty("", oModelObject);
          }
        }

        oModelObject = oInternalModelContext.getObject();
      }

      ActionRuntime.setActionEnablement(oInternalModelContext, oActionOperationAvailableMap, aSelectedContexts, "chart");

      if (aSelectedContexts.length > 1) {
        aActionsMultiselectDisabled.forEach(function (sAction) {
          oInternalModelContext.setProperty(sAction, false);
        });
      }
    }
  };
  return ChartRuntime;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,