/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/base/Log", "sap/fe/core/CommonUtils", "sap/fe/core/helpers/StableIdHelper", "sap/fe/core/templating/PropertyFormatters", "sap/fe/macros/field/FieldHelper", "sap/fe/macros/internal/valuehelp/ValueHelpTemplating"], function (Log, CommonUtils, StableIdHelper, PropertyFormatters, FieldHelper, ValueHelpTemplating) {
  "use strict";

  var generateID = ValueHelpTemplating.generateID;
  var getRelativePropertyPath = PropertyFormatters.getRelativePropertyPath;
  var generate = StableIdHelper.generate;

  var getCustomDataWithModifier = function (oControl, sProperty, oModifier) {
    try {
      var aCustomData = [];
      return Promise.resolve(Promise.resolve().then(oModifier.getAggregation.bind(oModifier, oControl, "customData"))).then(function (aRetrievedCustomData) {
        var oPromise = aRetrievedCustomData.reduce(function (oPreviousPromise, oCustomData) {
          return oPreviousPromise.then(oModifier.getProperty.bind(oModifier, oCustomData, "key")).then(function (sKey) {
            if (sKey === sProperty) {
              aCustomData.push(oCustomData);
            }
          });
        }, Promise.resolve());
        return Promise.resolve(oPromise).then(function () {
          if (aCustomData.length === 1) {
            return oModifier.getProperty(aCustomData[0], "value");
          } else {
            return undefined;
          }
        });
      });
    } catch (e) {
      return Promise.reject(e);
    }
  };

  var NS_MACRODATA = "http://schemas.sap.com/sapui5/extension/sap.ui.core.CustomData/1",
      mDefaultTypeForEdmType = {
    "Edm.Boolean": {
      modelType: "Bool"
    },
    "Edm.Byte": {
      modelType: "Int"
    },
    "Edm.Date": {
      modelType: "Date"
    },
    "Edm.DateTime": {
      modelType: "Date"
    },
    "Edm.DateTimeOffset": {
      modelType: "DateTimeOffset"
    },
    "Edm.Decimal": {
      modelType: "Decimal"
    },
    "Edm.Double": {
      modelType: "Float"
    },
    "Edm.Float": {
      modelType: "Float"
    },
    "Edm.Guid": {
      modelType: "Guid"
    },
    "Edm.Int16": {
      modelType: "Int"
    },
    "Edm.Int32": {
      modelType: "Int"
    },
    "Edm.Int64": {
      modelType: "Int"
    },
    "Edm.SByte": {
      modelType: "Int"
    },
    "Edm.Single": {
      modelType: "Float"
    },
    "Edm.String": {
      modelType: "String"
    },
    "Edm.Time": {
      modelType: "TimeOfDay"
    },
    "Edm.TimeOfDay": {
      modelType: "TimeOfDay"
    },
    "Edm.Stream": {
      //no corresponding modelType - ignore for filtering
      modelType: undefined
    }
  };

  function _retrieveModel() {
    this.control.detachModelContextChange(_retrieveModel, this);
    var sModelName = this.modelName,
        oModel = this.control.getModel(sModelName);

    if (oModel) {
      this.resolve(oModel);
    } else {
      this.control.attachModelContextChange(_retrieveModel, this);
    }
  }

  var DelegateUtil = {
    getLocalizedText: function (sTextOrToken, oControl) {
      var aMatch = /{([A-Za-z0-9_.|@]+)>([A-Za-z0-9_.|]+)}/.exec(sTextOrToken);

      if (aMatch) {
        try {
          var oResourceBundle = oControl.getModel(aMatch[1]).getResourceBundle();
          return oResourceBundle.getText(aMatch[2]);
        } catch (e) {
          Log.info("Unable to retrieve localized text ".concat(sTextOrToken));
        }
      }

      return sTextOrToken;
    },
    getCustomData: function (oControl, sProperty, oModifier) {
      // If Modifier is given, the method must execute asynchronously and return a Promise
      if (oModifier) {
        return getCustomDataWithModifier(oControl, sProperty, oModifier);
      } else {
        // Delegate invoked from a non-flex change - FilterBarDelegate._addP13nItem for OP table filtering, FilterBarDelegate.fetchProperties etc.
        if (oControl && sProperty) {
          if (oControl instanceof window.Element) {
            return oControl.getAttributeNS(NS_MACRODATA, sProperty);
          }

          if (oControl.data instanceof Function) {
            return oControl.data(sProperty);
          }
        }

        return undefined;
      }
    },
    setCustomData: function (oControl, sProperty, vValue) {
      if (oControl && sProperty) {
        if (oControl instanceof window.Element) {
          return oControl.setAttributeNS(NS_MACRODATA, "customData:".concat(sProperty), vValue);
        }

        if (oControl.data instanceof Function) {
          return oControl.data(sProperty, vValue);
        }
      }
    },
    fetchPropertiesForEntity: function (sEntitySet, oMetaModel) {
      return oMetaModel.requestObject("".concat(sEntitySet, "/"));
    },
    fetchAnnotationsForEntity: function (sEntitySet, oMetaModel) {
      return oMetaModel.requestObject("".concat(sEntitySet, "@"));
    },
    fetchModel: function (oControl) {
      return new Promise(function (resolve) {
        var sModelName = oControl.getDelegate().payload && oControl.getDelegate().payload.modelName,
            oContext = {
          modelName: sModelName,
          control: oControl,
          resolve: resolve
        };

        _retrieveModel.call(oContext);
      });
    },
    loadMacroLibrary: function () {
      return new Promise(function (resolve) {
        sap.ui.require(["sap/fe/macros/macroLibrary"], function
          /*macroLibrary*/
        () {
          resolve();
        });
      });
    },
    templateControlFragment: function (sFragmentName, oPreprocessorSettings, oOptions, oModifier) {
      return CommonUtils.templateControlFragment(sFragmentName, oPreprocessorSettings, oOptions, oModifier);
    },
    doesValueHelpExist: function (mParameters) {
      var sPropertyName = mParameters.sPropertyName || "";
      var sValueHelpType = mParameters.sValueHelpType || "";
      var oMetaModel = mParameters.oMetaModel;
      var oModifier = mParameters.oModifier;
      var sOriginalProperty = "".concat(mParameters.sBindingPath, "/").concat(sPropertyName);
      var oPropertyContext = oMetaModel.createBindingContext(sOriginalProperty);
      var sValueHelpProperty = FieldHelper.valueHelpProperty(oPropertyContext);
      var bIsAbsolute = mParameters.sBindingPath && mParameters.sBindingPath.indexOf("/") === 0; // unit/currency

      if (sValueHelpProperty.indexOf("$Path") > -1) {
        sValueHelpProperty = oMetaModel.getObject(sValueHelpProperty);
      }

      if (bIsAbsolute && sValueHelpProperty.indexOf("/") !== 0) {
        sValueHelpProperty = "".concat(mParameters.sBindingPath, "/").concat(sValueHelpProperty);
      }

      var sGeneratedId = generateID(mParameters.flexId, generate([oModifier ? oModifier.getId(mParameters.oControl) : mParameters.oControl.getId(), sValueHelpType]), getRelativePropertyPath(oPropertyContext.getProperty(sOriginalProperty), {
        context: {
          getModel: function () {
            return mParameters.oMetaModel;
          },
          getPath: function () {
            return sOriginalProperty;
          }
        }
      }), getRelativePropertyPath(oPropertyContext.getProperty(sValueHelpProperty), {
        context: {
          getModel: function () {
            return mParameters.oMetaModel;
          },
          getPath: function () {
            return sValueHelpProperty;
          }
        }
      }));
      return Promise.resolve().then(function () {
        if (oModifier) {
          return oModifier.getAggregation(mParameters.oControl, "dependents");
        }

        return mParameters.oControl.getAggregation("dependents");
      }).then(function (aDependents) {
        return Promise.resolve(aDependents && aDependents.some(function (oDependent) {
          return oModifier ? oModifier.getId(oDependent) === sGeneratedId : oDependent.getId() === sGeneratedId;
        }));
      });
    },
    isValueHelpRequired: function (mParameters, bInFilterField) {
      var sPropertyName = mParameters.sPropertyName || "",
          oMetaModel = mParameters.oMetaModel,
          sProperty = "".concat(mParameters.sBindingPath, "/").concat(sPropertyName),
          oPropertyContext = oMetaModel.createBindingContext(sProperty),
          sValueHelpProperty = FieldHelper.valueHelpProperty(oPropertyContext, bInFilterField);
      return this.getCustomData(mParameters.oControl, "displayModePropertyBinding", mParameters.oModifier).then(function (bReadOnly) {
        // Check whether the control is read-only. If yes, no need of a value help.
        bReadOnly = typeof bReadOnly === "boolean" ? bReadOnly : bReadOnly === "true";

        if (bReadOnly) {
          return false;
        } // Else, check whether Value Help relevant annotation exists for the property.
        // TODO use PropertyFormatter.hasValueHelp () => if doing so, QUnit tests fail due to mocked model implementation


        return Promise.all([oMetaModel.requestObject("".concat(sValueHelpProperty, "@com.sap.vocabularies.Common.v1.ValueListWithFixedValues")), oMetaModel.requestObject("".concat(sValueHelpProperty, "@com.sap.vocabularies.Common.v1.ValueListReferences")), oMetaModel.requestObject("".concat(sValueHelpProperty, "@com.sap.vocabularies.Common.v1.ValueListMapping")), oMetaModel.requestObject("".concat(sValueHelpProperty, "@com.sap.vocabularies.Common.v1.ValueList"))]);
      }).then(function (aResults) {
        return !!aResults[0] || !!aResults[1] || !!aResults[2] || !!aResults[3];
      }).catch(function (oError) {
        Log.warning("Error while retrieving custom data / value list annotation values", oError);
      });
    },
    isTypeFilterable: function (sType) {
      return sType && sType in mDefaultTypeForEdmType && !!mDefaultTypeForEdmType[sType].modelType;
    },
    getModelType: function (sType) {
      return sType && sType in mDefaultTypeForEdmType && mDefaultTypeForEdmType[sType].modelType;
    },
    isMultiValue: function (oProperty) {
      var bIsMultiValue = true; //SingleValue | MultiValue | SingleRange | MultiRange | SearchExpression | MultiRangeOrSearchExpression

      switch (oProperty.filterExpression) {
        case "SearchExpression":
        case "SingleRange":
        case "SingleValue":
          bIsMultiValue = false;
          break;

        default:
          break;
      }

      if (oProperty.type && oProperty.type.indexOf("Boolean") > 0) {
        bIsMultiValue = false;
      }

      return bIsMultiValue;
    }
  };
  return DelegateUtil;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,