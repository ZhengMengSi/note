/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/CommonUtils"], function (CommonUtils) {
  "use strict";

  var IntentBasedNavigationOverride = {
    adaptNavigationContext: function (oSelectionVariant, oTargetInfo) {
      var oView = this.getView(),
          oController = oView.getController(),
          oFilterBar = oController._getFilterBarControl(); // Adding filter bar values to the navigation does not make sense if no context has been selected.
      // Hence only consider filter bar values when SelectionVariant is not empty


      if (oFilterBar && !oSelectionVariant.isEmpty()) {
        var oViewData = oView.getViewData(),
            sRootPath = oViewData.fullContextPath;
        var oFilterBarConditions = Object.assign({}, this.base.getView().getController().filterBarConditions);
        var aParameters = [];

        if (oViewData.contextPath) {
          var oMetaModel = oView.getModel().getMetaModel(),
              oParameterInfo = CommonUtils.getParameterInfo(oMetaModel, oViewData.contextPath),
              oParamProperties = oParameterInfo.parameterProperties;
          aParameters = oParamProperties && Object.keys(oParamProperties) || [];
        }

        oFilterBarConditions = oController._intentBasedNavigation.prepareFiltersForExternalNavigation(oFilterBarConditions, sRootPath, aParameters);

        var oMultipleModeControl = oController._getMultiModeControl();

        if (oMultipleModeControl) {
          // Do we need to exclude Fields (multi tables mode with multi entity sets)?
          var oTabsModel = oMultipleModeControl.getTabsModel();

          if (oTabsModel) {
            var _oMultipleModeControl;

            var aIgnoredFieldsForTab = oTabsModel.getProperty("/".concat((_oMultipleModeControl = oMultipleModeControl.content) === null || _oMultipleModeControl === void 0 ? void 0 : _oMultipleModeControl.getSelectedKey(), "/notApplicable/fields"));

            if (Array.isArray(aIgnoredFieldsForTab) && aIgnoredFieldsForTab.length > 0) {
              aIgnoredFieldsForTab.forEach(function (sProperty) {
                delete oFilterBarConditions.filterConditions[sProperty];
              });
            }
          }
        } // TODO: move this also into the intent based navigation controller extension


        CommonUtils.addExternalStateFiltersToSelectionVariant(oSelectionVariant, oFilterBarConditions, oTargetInfo, oFilterBar);
        delete oTargetInfo.propertiesWithoutConflict;
      }
    },
    getEntitySet: function () {
      return this.base.getCurrentEntitySet();
    }
  };
  return IntentBasedNavigationOverride;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnRlbnRCYXNlZE5hdmlnYXRpb25PdmVycmlkZSIsImFkYXB0TmF2aWdhdGlvbkNvbnRleHQiLCJvU2VsZWN0aW9uVmFyaWFudCIsIm9UYXJnZXRJbmZvIiwib1ZpZXciLCJnZXRWaWV3Iiwib0NvbnRyb2xsZXIiLCJnZXRDb250cm9sbGVyIiwib0ZpbHRlckJhciIsIl9nZXRGaWx0ZXJCYXJDb250cm9sIiwiaXNFbXB0eSIsIm9WaWV3RGF0YSIsImdldFZpZXdEYXRhIiwic1Jvb3RQYXRoIiwiZnVsbENvbnRleHRQYXRoIiwib0ZpbHRlckJhckNvbmRpdGlvbnMiLCJPYmplY3QiLCJhc3NpZ24iLCJiYXNlIiwiZmlsdGVyQmFyQ29uZGl0aW9ucyIsImFQYXJhbWV0ZXJzIiwiY29udGV4dFBhdGgiLCJvTWV0YU1vZGVsIiwiZ2V0TW9kZWwiLCJnZXRNZXRhTW9kZWwiLCJvUGFyYW1ldGVySW5mbyIsIkNvbW1vblV0aWxzIiwiZ2V0UGFyYW1ldGVySW5mbyIsIm9QYXJhbVByb3BlcnRpZXMiLCJwYXJhbWV0ZXJQcm9wZXJ0aWVzIiwia2V5cyIsIl9pbnRlbnRCYXNlZE5hdmlnYXRpb24iLCJwcmVwYXJlRmlsdGVyc0ZvckV4dGVybmFsTmF2aWdhdGlvbiIsIm9NdWx0aXBsZU1vZGVDb250cm9sIiwiX2dldE11bHRpTW9kZUNvbnRyb2wiLCJvVGFic01vZGVsIiwiZ2V0VGFic01vZGVsIiwiYUlnbm9yZWRGaWVsZHNGb3JUYWIiLCJnZXRQcm9wZXJ0eSIsImNvbnRlbnQiLCJnZXRTZWxlY3RlZEtleSIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImZvckVhY2giLCJzUHJvcGVydHkiLCJmaWx0ZXJDb25kaXRpb25zIiwiYWRkRXh0ZXJuYWxTdGF0ZUZpbHRlcnNUb1NlbGVjdGlvblZhcmlhbnQiLCJwcm9wZXJ0aWVzV2l0aG91dENvbmZsaWN0IiwiZ2V0RW50aXR5U2V0IiwiZ2V0Q3VycmVudEVudGl0eVNldCJdLCJzb3VyY2VSb290IjoiLiIsInNvdXJjZXMiOlsiSW50ZW50QmFzZWROYXZpZ2F0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb21tb25VdGlscyBmcm9tIFwic2FwL2ZlL2NvcmUvQ29tbW9uVXRpbHNcIjtcbmltcG9ydCB0eXBlIEludGVudEJhc2VkTmF2aWdhdGlvbiBmcm9tIFwic2FwL2ZlL2NvcmUvY29udHJvbGxlcmV4dGVuc2lvbnMvSW50ZW50QmFzZWROYXZpZ2F0aW9uXCI7XG5pbXBvcnQgdHlwZSBMaXN0UmVwb3J0Q29udHJvbGxlciBmcm9tIFwic2FwL2ZlL3RlbXBsYXRlcy9MaXN0UmVwb3J0L0xpc3RSZXBvcnRDb250cm9sbGVyLmNvbnRyb2xsZXJcIjtcblxuY29uc3QgSW50ZW50QmFzZWROYXZpZ2F0aW9uT3ZlcnJpZGUgPSB7XG5cdGFkYXB0TmF2aWdhdGlvbkNvbnRleHQ6IGZ1bmN0aW9uICh0aGlzOiBJbnRlbnRCYXNlZE5hdmlnYXRpb24sIG9TZWxlY3Rpb25WYXJpYW50OiBhbnksIG9UYXJnZXRJbmZvOiBhbnkpIHtcblx0XHRjb25zdCBvVmlldyA9IHRoaXMuZ2V0VmlldygpLFxuXHRcdFx0b0NvbnRyb2xsZXIgPSBvVmlldy5nZXRDb250cm9sbGVyKCkgYXMgTGlzdFJlcG9ydENvbnRyb2xsZXIsXG5cdFx0XHRvRmlsdGVyQmFyID0gb0NvbnRyb2xsZXIuX2dldEZpbHRlckJhckNvbnRyb2woKTtcblx0XHQvLyBBZGRpbmcgZmlsdGVyIGJhciB2YWx1ZXMgdG8gdGhlIG5hdmlnYXRpb24gZG9lcyBub3QgbWFrZSBzZW5zZSBpZiBubyBjb250ZXh0IGhhcyBiZWVuIHNlbGVjdGVkLlxuXHRcdC8vIEhlbmNlIG9ubHkgY29uc2lkZXIgZmlsdGVyIGJhciB2YWx1ZXMgd2hlbiBTZWxlY3Rpb25WYXJpYW50IGlzIG5vdCBlbXB0eVxuXHRcdGlmIChvRmlsdGVyQmFyICYmICFvU2VsZWN0aW9uVmFyaWFudC5pc0VtcHR5KCkpIHtcblx0XHRcdGNvbnN0IG9WaWV3RGF0YSA9IG9WaWV3LmdldFZpZXdEYXRhKCkgYXMgYW55LFxuXHRcdFx0XHRzUm9vdFBhdGggPSBvVmlld0RhdGEuZnVsbENvbnRleHRQYXRoO1xuXHRcdFx0bGV0IG9GaWx0ZXJCYXJDb25kaXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgKHRoaXMuYmFzZS5nZXRWaWV3KCkuZ2V0Q29udHJvbGxlcigpIGFzIGFueSkuZmlsdGVyQmFyQ29uZGl0aW9ucyk7XG5cdFx0XHRsZXQgYVBhcmFtZXRlcnMgPSBbXTtcblxuXHRcdFx0aWYgKG9WaWV3RGF0YS5jb250ZXh0UGF0aCkge1xuXHRcdFx0XHRjb25zdCBvTWV0YU1vZGVsID0gb1ZpZXcuZ2V0TW9kZWwoKS5nZXRNZXRhTW9kZWwoKSxcblx0XHRcdFx0XHRvUGFyYW1ldGVySW5mbyA9IENvbW1vblV0aWxzLmdldFBhcmFtZXRlckluZm8ob01ldGFNb2RlbCwgb1ZpZXdEYXRhLmNvbnRleHRQYXRoKSxcblx0XHRcdFx0XHRvUGFyYW1Qcm9wZXJ0aWVzID0gb1BhcmFtZXRlckluZm8ucGFyYW1ldGVyUHJvcGVydGllcztcblx0XHRcdFx0YVBhcmFtZXRlcnMgPSAob1BhcmFtUHJvcGVydGllcyAmJiBPYmplY3Qua2V5cyhvUGFyYW1Qcm9wZXJ0aWVzKSkgfHwgW107XG5cdFx0XHR9XG5cblx0XHRcdG9GaWx0ZXJCYXJDb25kaXRpb25zID0gb0NvbnRyb2xsZXIuX2ludGVudEJhc2VkTmF2aWdhdGlvbi5wcmVwYXJlRmlsdGVyc0ZvckV4dGVybmFsTmF2aWdhdGlvbihcblx0XHRcdFx0b0ZpbHRlckJhckNvbmRpdGlvbnMsXG5cdFx0XHRcdHNSb290UGF0aCxcblx0XHRcdFx0YVBhcmFtZXRlcnNcblx0XHRcdCk7XG5cblx0XHRcdGNvbnN0IG9NdWx0aXBsZU1vZGVDb250cm9sID0gb0NvbnRyb2xsZXIuX2dldE11bHRpTW9kZUNvbnRyb2woKTtcblx0XHRcdGlmIChvTXVsdGlwbGVNb2RlQ29udHJvbCkge1xuXHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGV4Y2x1ZGUgRmllbGRzIChtdWx0aSB0YWJsZXMgbW9kZSB3aXRoIG11bHRpIGVudGl0eSBzZXRzKT9cblx0XHRcdFx0Y29uc3Qgb1RhYnNNb2RlbCA9IG9NdWx0aXBsZU1vZGVDb250cm9sLmdldFRhYnNNb2RlbCgpO1xuXHRcdFx0XHRpZiAob1RhYnNNb2RlbCkge1xuXHRcdFx0XHRcdGNvbnN0IGFJZ25vcmVkRmllbGRzRm9yVGFiID0gb1RhYnNNb2RlbC5nZXRQcm9wZXJ0eShcblx0XHRcdFx0XHRcdGAvJHtvTXVsdGlwbGVNb2RlQ29udHJvbC5jb250ZW50Py5nZXRTZWxlY3RlZEtleSgpfS9ub3RBcHBsaWNhYmxlL2ZpZWxkc2Bcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFJZ25vcmVkRmllbGRzRm9yVGFiKSAmJiBhSWdub3JlZEZpZWxkc0ZvclRhYi5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRhSWdub3JlZEZpZWxkc0ZvclRhYi5mb3JFYWNoKGZ1bmN0aW9uIChzUHJvcGVydHk6IGFueSkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgb0ZpbHRlckJhckNvbmRpdGlvbnMuZmlsdGVyQ29uZGl0aW9uc1tzUHJvcGVydHldO1xuXHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRPRE86IG1vdmUgdGhpcyBhbHNvIGludG8gdGhlIGludGVudCBiYXNlZCBuYXZpZ2F0aW9uIGNvbnRyb2xsZXIgZXh0ZW5zaW9uXG5cdFx0XHRDb21tb25VdGlscy5hZGRFeHRlcm5hbFN0YXRlRmlsdGVyc1RvU2VsZWN0aW9uVmFyaWFudChvU2VsZWN0aW9uVmFyaWFudCwgb0ZpbHRlckJhckNvbmRpdGlvbnMsIG9UYXJnZXRJbmZvLCBvRmlsdGVyQmFyKTtcblx0XHRcdGRlbGV0ZSBvVGFyZ2V0SW5mby5wcm9wZXJ0aWVzV2l0aG91dENvbmZsaWN0O1xuXHRcdH1cblx0fSxcblx0Z2V0RW50aXR5U2V0OiBmdW5jdGlvbiAodGhpczogSW50ZW50QmFzZWROYXZpZ2F0aW9uKSB7XG5cdFx0cmV0dXJuICh0aGlzLmJhc2UgYXMgYW55KS5nZXRDdXJyZW50RW50aXR5U2V0KCk7XG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEludGVudEJhc2VkTmF2aWdhdGlvbk92ZXJyaWRlO1xuIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFBQTtBQUFBOzs7O0VBSUEsSUFBTUEsNkJBQTZCLEdBQUc7SUFDckNDLHNCQUFzQixFQUFFLFVBQXVDQyxpQkFBdkMsRUFBK0RDLFdBQS9ELEVBQWlGO01BQ3hHLElBQU1DLEtBQUssR0FBRyxLQUFLQyxPQUFMLEVBQWQ7TUFBQSxJQUNDQyxXQUFXLEdBQUdGLEtBQUssQ0FBQ0csYUFBTixFQURmO01BQUEsSUFFQ0MsVUFBVSxHQUFHRixXQUFXLENBQUNHLG9CQUFaLEVBRmQsQ0FEd0csQ0FJeEc7TUFDQTs7O01BQ0EsSUFBSUQsVUFBVSxJQUFJLENBQUNOLGlCQUFpQixDQUFDUSxPQUFsQixFQUFuQixFQUFnRDtRQUMvQyxJQUFNQyxTQUFTLEdBQUdQLEtBQUssQ0FBQ1EsV0FBTixFQUFsQjtRQUFBLElBQ0NDLFNBQVMsR0FBR0YsU0FBUyxDQUFDRyxlQUR2QjtRQUVBLElBQUlDLG9CQUFvQixHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQW1CLEtBQUtDLElBQUwsQ0FBVWIsT0FBVixHQUFvQkUsYUFBcEIsRUFBRCxDQUE2Q1ksbUJBQS9ELENBQTNCO1FBQ0EsSUFBSUMsV0FBVyxHQUFHLEVBQWxCOztRQUVBLElBQUlULFNBQVMsQ0FBQ1UsV0FBZCxFQUEyQjtVQUMxQixJQUFNQyxVQUFVLEdBQUdsQixLQUFLLENBQUNtQixRQUFOLEdBQWlCQyxZQUFqQixFQUFuQjtVQUFBLElBQ0NDLGNBQWMsR0FBR0MsV0FBVyxDQUFDQyxnQkFBWixDQUE2QkwsVUFBN0IsRUFBeUNYLFNBQVMsQ0FBQ1UsV0FBbkQsQ0FEbEI7VUFBQSxJQUVDTyxnQkFBZ0IsR0FBR0gsY0FBYyxDQUFDSSxtQkFGbkM7VUFHQVQsV0FBVyxHQUFJUSxnQkFBZ0IsSUFBSVosTUFBTSxDQUFDYyxJQUFQLENBQVlGLGdCQUFaLENBQXJCLElBQXVELEVBQXJFO1FBQ0E7O1FBRURiLG9CQUFvQixHQUFHVCxXQUFXLENBQUN5QixzQkFBWixDQUFtQ0MsbUNBQW5DLENBQ3RCakIsb0JBRHNCLEVBRXRCRixTQUZzQixFQUd0Qk8sV0FIc0IsQ0FBdkI7O1FBTUEsSUFBTWEsb0JBQW9CLEdBQUczQixXQUFXLENBQUM0QixvQkFBWixFQUE3Qjs7UUFDQSxJQUFJRCxvQkFBSixFQUEwQjtVQUN6QjtVQUNBLElBQU1FLFVBQVUsR0FBR0Ysb0JBQW9CLENBQUNHLFlBQXJCLEVBQW5COztVQUNBLElBQUlELFVBQUosRUFBZ0I7WUFBQTs7WUFDZixJQUFNRSxvQkFBb0IsR0FBR0YsVUFBVSxDQUFDRyxXQUFYLHFDQUN4Qkwsb0JBQW9CLENBQUNNLE9BREcsMERBQ3hCLHNCQUE4QkMsY0FBOUIsRUFEd0IsMkJBQTdCOztZQUdBLElBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxvQkFBZCxLQUF1Q0Esb0JBQW9CLENBQUNNLE1BQXJCLEdBQThCLENBQXpFLEVBQTRFO2NBQzNFTixvQkFBb0IsQ0FBQ08sT0FBckIsQ0FBNkIsVUFBVUMsU0FBVixFQUEwQjtnQkFDdEQsT0FBTzlCLG9CQUFvQixDQUFDK0IsZ0JBQXJCLENBQXNDRCxTQUF0QyxDQUFQO2NBQ0EsQ0FGRDtZQUdBO1VBQ0Q7UUFDRCxDQWpDOEMsQ0FtQy9DOzs7UUFDQW5CLFdBQVcsQ0FBQ3FCLHlDQUFaLENBQXNEN0MsaUJBQXRELEVBQXlFYSxvQkFBekUsRUFBK0ZaLFdBQS9GLEVBQTRHSyxVQUE1RztRQUNBLE9BQU9MLFdBQVcsQ0FBQzZDLHlCQUFuQjtNQUNBO0lBQ0QsQ0E5Q29DO0lBK0NyQ0MsWUFBWSxFQUFFLFlBQXVDO01BQ3BELE9BQVEsS0FBSy9CLElBQU4sQ0FBbUJnQyxtQkFBbkIsRUFBUDtJQUNBO0VBakRvQyxDQUF0QztTQW9EZWxELDZCIn0=