/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 *      (c) Copyright 2009-2021 SAP SE. All rights reserved
 */
sap.ui.define(["sap/fe/core/converters/helpers/IssueManager", "sap/fe/macros/CommonHelper", "../../ManifestSettings", "./Chart", "./Table"], function (IssueManager, CommonHelper, ManifestSettings, Chart, Table) {
  "use strict";

  var _exports = {};
  var createChartVisualization = Chart.createChartVisualization;
  var TemplateType = ManifestSettings.TemplateType;
  var IssueType = IssueManager.IssueType;
  var IssueSeverity = IssueManager.IssueSeverity;
  var IssueCategory = IssueManager.IssueCategory;

  var getVisualizationsFromPresentationVariant = function (presentationVariantAnnotation, visualizationPath, converterContext) {
    var visualizationAnnotations = [];
    var bIsALP = converterContext.getManifestWrapper().hasMultipleVisualizations() || converterContext.getTemplateType() === TemplateType.AnalyticalListPage;

    if (!isPresentationCompliant(presentationVariantAnnotation, bIsALP)) {
      var entityType = converterContext.getEntityType();
      var defaultLineItemAnnotation = getDefaultLineItem(entityType);

      if (defaultLineItemAnnotation) {
        visualizationAnnotations.push({
          visualization: defaultLineItemAnnotation,
          annotationPath: converterContext.getRelativeAnnotationPath(defaultLineItemAnnotation.fullyQualifiedName, entityType),
          converterContext: converterContext
        });
      }
    } else {
      var baseVisualizationPath = visualizationPath.split("@")[0];
      var visualizations = presentationVariantAnnotation.Visualizations;

      var pushFirstVizOfType = function (allowedTerms) {
        var firstViz = visualizations.find(function (viz) {
          return allowedTerms.indexOf(viz.$target.term) >= 0;
        });

        if (firstViz) {
          visualizationAnnotations.push({
            visualization: firstViz.$target,
            annotationPath: "".concat(baseVisualizationPath).concat(firstViz.value),
            converterContext: converterContext
          });
        }
      };

      if (bIsALP) {
        // In case of ALP, we use the first LineItem and the first Chart
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem"]);
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.Chart"]);
      } else {
        // Otherwise, we use the first viz only (Chart or LineItem)
        pushFirstVizOfType(["com.sap.vocabularies.UI.v1.LineItem", "com.sap.vocabularies.UI.v1.Chart"]);
      }
    }

    return visualizationAnnotations;
  };

  _exports.getVisualizationsFromPresentationVariant = getVisualizationsFromPresentationVariant;

  function getSelectionPresentationVariant(entityType, annotationPath, converterContext) {
    if (annotationPath) {
      var resolvedTarget = converterContext.getEntityTypeAnnotation(annotationPath);
      var selectionPresentationVariant = resolvedTarget.annotation;

      if (selectionPresentationVariant) {
        if (selectionPresentationVariant.term === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant") {
          return selectionPresentationVariant;
        }
      } else {
        throw new Error("Annotation Path for the SPV mentioned in the manifest is not found, Please add the SPV in the annotation");
      }
    } else {
      var _entityType$annotatio, _entityType$annotatio2;

      return (_entityType$annotatio = entityType.annotations) === null || _entityType$annotatio === void 0 ? void 0 : (_entityType$annotatio2 = _entityType$annotatio.UI) === null || _entityType$annotatio2 === void 0 ? void 0 : _entityType$annotatio2.SelectionPresentationVariant;
    }
  }

  _exports.getSelectionPresentationVariant = getSelectionPresentationVariant;

  function isSelectionPresentationCompliant(SelectionPresentationVariant, bIsALP) {
    var presentationVariant = SelectionPresentationVariant && SelectionPresentationVariant.PresentationVariant;

    if (presentationVariant) {
      return isPresentationCompliant(presentationVariant, bIsALP);
    } else {
      throw new Error("Presentation Variant is not present in the SPV annotation");
    }
  }

  _exports.isSelectionPresentationCompliant = isSelectionPresentationCompliant;

  function isPresentationCompliant(presentationVariant) {
    var bIsALP = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var bHasTable = false,
        bHasChart = false;

    if (bIsALP) {
      if (presentationVariant !== null && presentationVariant !== void 0 && presentationVariant.Visualizations) {
        var aVisualizations = presentationVariant.Visualizations;
        aVisualizations.forEach(function (oVisualization) {
          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem") {
            bHasTable = true;
          }

          if (oVisualization.$target.term === "com.sap.vocabularies.UI.v1.Chart") {
            bHasChart = true;
          }
        });
      }

      return bHasChart && bHasTable;
    } else {
      return (presentationVariant === null || presentationVariant === void 0 ? void 0 : presentationVariant.Visualizations) && !!presentationVariant.Visualizations.find(function (visualization) {
        return visualization.$target.term === "com.sap.vocabularies.UI.v1.LineItem" || visualization.$target.term === "com.sap.vocabularies.UI.v1.Chart";
      });
    }
  }

  _exports.isPresentationCompliant = isPresentationCompliant;

  function getDefaultLineItem(entityType) {
    var _entityType$annotatio3;

    return (_entityType$annotatio3 = entityType.annotations.UI) === null || _entityType$annotatio3 === void 0 ? void 0 : _entityType$annotatio3.LineItem;
  }

  _exports.getDefaultLineItem = getDefaultLineItem;

  function getDefaultChart(entityType) {
    var _entityType$annotatio4;

    return (_entityType$annotatio4 = entityType.annotations.UI) === null || _entityType$annotatio4 === void 0 ? void 0 : _entityType$annotatio4.Chart;
  }

  _exports.getDefaultChart = getDefaultChart;

  function getDefaultPresentationVariant(entityType) {
    var _entityType$annotatio5, _entityType$annotatio6;

    return (_entityType$annotatio5 = entityType.annotations) === null || _entityType$annotatio5 === void 0 ? void 0 : (_entityType$annotatio6 = _entityType$annotatio5.UI) === null || _entityType$annotatio6 === void 0 ? void 0 : _entityType$annotatio6.PresentationVariant;
  }

  _exports.getDefaultPresentationVariant = getDefaultPresentationVariant;

  function getDefaultSelectionVariant(entityType) {
    var _entityType$annotatio7, _entityType$annotatio8;

    return (_entityType$annotatio7 = entityType.annotations) === null || _entityType$annotatio7 === void 0 ? void 0 : (_entityType$annotatio8 = _entityType$annotatio7.UI) === null || _entityType$annotatio8 === void 0 ? void 0 : _entityType$annotatio8.SelectionVariant;
  }

  _exports.getDefaultSelectionVariant = getDefaultSelectionVariant;

  function getSelectionVariant(entityType, converterContext) {
    var annotationPath = converterContext.getManifestWrapper().getDefaultTemplateAnnotationPath();
    var selectionPresentationVariant = getSelectionPresentationVariant(entityType, annotationPath, converterContext);
    var selectionVariant;

    if (selectionPresentationVariant) {
      selectionVariant = selectionPresentationVariant.SelectionVariant;

      if (selectionVariant) {
        return selectionVariant;
      }
    } else {
      selectionVariant = getDefaultSelectionVariant(entityType);
      return selectionVariant;
    }
  }

  _exports.getSelectionVariant = getSelectionVariant;

  function getDataVisualizationConfiguration(visualizationPath, isCondensedTableLayoutCompliant, inConverterContext, viewConfiguration, doNotCheckApplySupported, associatedPresentationVariantPath) {
    var resolvedTarget = visualizationPath !== "" ? inConverterContext.getEntityTypeAnnotation(visualizationPath) : {
      annotation: undefined,
      converterContext: inConverterContext
    };
    var resolvedAssociatedPresentationVariant = associatedPresentationVariantPath ? inConverterContext.getEntityTypeAnnotation(associatedPresentationVariantPath) : null;
    var resolvedVisualization = resolvedTarget.annotation;
    inConverterContext = resolvedTarget.converterContext;
    var visualizationAnnotations = [];
    var presentationVariantAnnotation;
    var presentationPath = "";
    var chartVisualization, tableVisualization;
    var sTerm = resolvedVisualization === null || resolvedVisualization === void 0 ? void 0 : resolvedVisualization.term;

    if (sTerm) {
      switch (sTerm) {
        case "com.sap.vocabularies.UI.v1.LineItem":
        case "com.sap.vocabularies.UI.v1.Chart":
          presentationVariantAnnotation = resolvedAssociatedPresentationVariant === null || resolvedAssociatedPresentationVariant === void 0 ? void 0 : resolvedAssociatedPresentationVariant.annotation;
          visualizationAnnotations.push({
            visualization: resolvedVisualization,
            annotationPath: visualizationPath,
            converterContext: inConverterContext
          });
          break;

        case "com.sap.vocabularies.UI.v1.PresentationVariant":
          presentationVariantAnnotation = resolvedVisualization;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(resolvedVisualization, visualizationPath, inConverterContext));
          break;

        case "com.sap.vocabularies.UI.v1.SelectionPresentationVariant":
          presentationVariantAnnotation = resolvedVisualization.PresentationVariant; // Presentation can be inline or outside the SelectionPresentationVariant

          presentationPath = presentationVariantAnnotation.fullyQualifiedName;
          visualizationAnnotations = visualizationAnnotations.concat(getVisualizationsFromPresentationVariant(presentationVariantAnnotation, visualizationPath, inConverterContext));
          break;

        default:
          break;
      }

      visualizationAnnotations.forEach(function (visualizationAnnotation) {
        var visualization = visualizationAnnotation.visualization,
            annotationPath = visualizationAnnotation.annotationPath,
            converterContext = visualizationAnnotation.converterContext;

        switch (visualization.term) {
          case "com.sap.vocabularies.UI.v1.Chart":
            chartVisualization = createChartVisualization(visualization, annotationPath, converterContext, doNotCheckApplySupported);
            break;

          case "com.sap.vocabularies.UI.v1.LineItem":
          default:
            tableVisualization = Table.createTableVisualization(visualization, annotationPath, converterContext, presentationVariantAnnotation, isCondensedTableLayoutCompliant, viewConfiguration);
            break;
        }
      });
    } else {
      tableVisualization = Table.createDefaultTableVisualization(inConverterContext);
      inConverterContext.getDiagnostics().addIssue(IssueCategory.Annotation, IssueSeverity.Medium, IssueType.MISSING_LINEITEM);
    }

    var aVisualizations = [];
    var sPath = sTerm === "com.sap.vocabularies.UI.v1.SelectionPresentationVariant" ? presentationPath : resolvedVisualization && resolvedVisualization.fullyQualifiedName;

    if (sPath === undefined) {
      sPath = "/";
    }

    if (chartVisualization) {
      aVisualizations.push(chartVisualization);
    }

    if (tableVisualization) {
      aVisualizations.push(tableVisualization);
    }

    return {
      visualizations: aVisualizations,
      annotationPath: inConverterContext.getEntitySetBasedAnnotationPath(sPath)
    };
  }
  /**
   * Return UI Control (LineItem/Chart) Context.
   *
   * @function
   * @name getUiControl
   * @param oPresentationContext Presentation context object (Presentation variant or UI.LineItem/Chart)
   * @param sControlPath Control path
   * @returns The Control (LineItem/Chart) context
   */


  _exports.getDataVisualizationConfiguration = getDataVisualizationConfiguration;

  function getUiControl(oPresentationContext, sControlPath) {
    var oPresentation = oPresentationContext.getObject(oPresentationContext.getPath()),
        oPresentationVariantPath = CommonHelper.createPresentationPathContext(oPresentationContext),
        oModel = oPresentationContext.getModel();

    if (CommonHelper._isPresentationVariantAnnotation(oPresentationVariantPath.getPath())) {
      // Uncomplete PresentationVariant can be passed to macro via SelectionPresentationVariant
      var aVisualizations = oPresentation.Visualizations;

      if (Array.isArray(aVisualizations)) {
        for (var i = 0; i < aVisualizations.length; i++) {
          if (aVisualizations[i].$AnnotationPath.indexOf(sControlPath) !== -1) {
            sControlPath = aVisualizations[i].$AnnotationPath;
            break;
          }
        }
      }

      return oModel.getMetaContext(oPresentationContext.getPath().split("@")[0] + sControlPath);
    }

    return oPresentationContext;
  }

  _exports.getUiControl = getUiControl;
  return _exports;
}, false);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,